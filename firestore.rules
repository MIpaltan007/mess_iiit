rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an Admin by reading their profile
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // User Profiles (collection: users)
    match /users/{userId} {
      // Allow create if user is authenticated and creating their own document.
      // The logic for "only one Admin" is primarily enforced by your application code (checkIfAdminExists).
      // This rule ensures the user creating the doc is the one authenticated and sets basic data integrity.
      allow create: if isAuthenticated() && request.auth.uid == userId
                      && request.resource.data.uid == userId
                      && request.resource.data.email == request.auth.token.email
                      // Ensure all required fields are present and only allowed fields are written on create
                      && request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'role', 'joinDate'])
                      && request.resource.data.keys().hasOnly(['uid', 'email', 'fullName', 'role', 'joinDate', 'lastPurchaseAt', 'lastOrderId']);

      // Authenticated users can read their own profile. Admins can read any profile.
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());

      // Authenticated users can update their own profile (but cannot change their role or UID/email).
      // Admins can update any profile (including roles).
      allow update: if isAuthenticated() &&
                      (
                        ( // User updating their own profile
                          request.auth.uid == userId &&
                          // User cannot change their own role, uid, or email through this update path
                          request.resource.data.role == resource.data.role &&
                          request.resource.data.uid == resource.data.uid &&
                          request.resource.data.email == resource.data.email &&
                          // Ensure only allowed fields can be updated by the user
                          request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'role', 'joinDate']) && // required fields must persist
                          request.resource.data.keys().hasOnly(['uid', 'email', 'fullName', 'role', 'joinDate', 'lastPurchaseAt', 'lastOrderId'])
                        ) ||
                        isAdmin() // Admins can update any field
                      );

      // Only Admins can delete user profiles.
      allow delete: if isAdmin();
    }

    // Menu Items (collection: menuItems)
    match /menuItems/{menuItemId} {
      // Anyone (authenticated or not) can read menu items.
      allow read: if true;

      // Only Admins can create, update, or delete menu items.
      allow write: if isAdmin(); // Covers create, update, delete
    }

    // Orders (collection: orders)
    match /orders/{orderId} {
      // Authenticated users can create orders for themselves.
      // The order must contain their UID and email.
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.userEmail == request.auth.token.email;
                      // Admins could also be allowed to create orders if needed, add: || isAdmin()

      // Authenticated users can read their own orders. Admins can read any order.
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());

      // Orders are generally immutable by clients once created.
      // Only Admins can update or delete orders.
      allow update, delete: if isAdmin();
    }

    // Coupons (collection: coupons)
    // Coupon ID is the same as Order ID.
    match /coupons/{couponId} {
      // Coupon creation and updates (like marking as used) are primarily handled by server-side logic
      // (your Next.js server actions: createCouponForOrder, validateAndUseCoupon).
      // These server actions, if using the Firebase Admin SDK, bypass security rules.
      // If they were client-callable functions without Admin SDK, specific rules would be needed.

      // Admins can read any coupon (e.g., for the validation page).
      allow read: if isAdmin();

      // Admins can write to coupons (e.g., manual adjustments if ever needed, or if server actions weren't using Admin SDK).
      allow write: if isAdmin();
    }
  }
}